apply plugin: 'java'

archivesBaseName = 'mssql-jdbc'
version = '6.1.2'

allprojects {
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }
        
    tasks.withType(Test) {
       systemProperty "file.encoding", "UTF-8"
    }
}

def excludedFile = ''

if(build == "build41") {
	jar.archiveName = "${archivesBaseName}-${version}.jre7.jar"
	excludedFile = 'com/microsoft/sqlserver/jdbc/SQLServerJdbc42.java'
	
	sourceCompatibility = 1.7
	targetCompatibility = 1.7
}

if(build == "build42") {
	jar.archiveName = "${archivesBaseName}-${version}.jre8.jar"
	excludedFile = 'com/microsoft/sqlserver/jdbc/SQLServerJdbc41.java'
	
	sourceCompatibility = 1.8
	targetCompatibility = 1.8
}

jar {
	manifest {
        attributes 'Title': "Microsoft JDBC Driver ${version} for SQL Server",
        'Version': version,
        'Vendor': 'Microsoft Corporation'
	}
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
			exclude excludedFile
        }
		
		resources {
			srcDirs "$projectDir"
			include 'META-INF/services/java.sql.Driver'
		}
    }
}

//Get dependencies from Maven central repository
repositories {
    mavenCentral()
}

//enable junit gradle plugin
buildscript {
	repositories {
		mavenCentral()

	}
	dependencies {
		classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M3'

	}
}

apply plugin: 'org.junit.platform.gradle.plugin'

ext.junit4Version        = '4.12'
ext.junitPlatformVersion = '1.0.0-M3'
ext.junitJupiterVersion  = '5.0.0-M3'

junitPlatform {
	filters {
		tags {
			// comment out the exclude property to run all tests
			exclude 'slow'
		}
	}
}

dependencies {

	compile 'com.microsoft.azure:azure-keyvault:0.9.7'
		
	// JUnit Jupiter API and TestEngine implementation
	testCompile("junit:junit:${junit4Version}")
	testCompile("org.junit.platform:junit-platform-console:${junitPlatformVersion}")
	testCompile("org.junit.platform:junit-platform-commons:${junitPlatformVersion}")
	testCompile("org.junit.platform:junit-platform-engine:${junitPlatformVersion}")
	testCompile("org.junit.platform:junit-platform-launcher:${junitPlatformVersion}")
	testCompile("org.junit.platform:junit-platform-runner:${junitPlatformVersion}")
	testCompile("org.junit.platform:junit-platform-surefire-provider:${junitPlatformVersion}")
	testCompile("org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}")
	testCompile("org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}")
}
